def read_settings(self):
        ''' This method overrides the default and uses env vars '''

        # Regions
        self.regions = []
        configRegions = os.environ.get('EC2_REGION')
        configRegions_exclude = os.environ.get('EC2_INI_REGIONS_EXCLUDE',
                                               'us-gov-west-1,cn-north-1')
        if (configRegions == 'all'):
            if self.eucalyptus_host:
                self.regions.append(boto.connect_euca(host=self.eucalyptus_host).
                                    region.name, **self.credentials)
            else:
                for regionInfo in ec2.regions():
                    if regionInfo.name not in configRegions_exclude:
                        self.regions.append(regionInfo.name)
        else:
            self.regions = configRegions.split(",")

        # is eucalyptus?
        self.eucalyptus_host = None
        self.eucalyptus = False

        # Destination addresses
        self.destination_variable = os.environ.get('EC2_INI_DEST_VAR',
                                                   'private_dns_address')
        self.vpc_destination_variable = os.environ.get('EC2_INI_VPC_DEST_VAR',
                                                       'private_ip_address')

        self.hostname_variable = os.environ.get('EC2_INI_HOSTNAME_VAR', None)
        self.destination_format = os.environ.get('EC2_INI_DEST_FORMAT', None)
        self.destination_format_tags = os.environ.get('EC2_INI_DEST_FORMAT_TAGS',
                                                      None)
        if self.destination_format_tags:
            self.destination_format_tags = self.destination_format_tags.split(',')

        # Route53
        self.route53_enabled = True
        self.route53_excluded_zones = []
        if os.environ.get('EC2_INI_ROUTE53_EXCLUDED_ZONES'):
            self.route53_excluded_zones.extend(
                os.environ.get('EC2_INI_ROUTE53_EXCLUDED_ZONES').split(','))

        # Include RDS instances?
        self.rds_enabled = False
        self.include_rds_clusters = False

        # Include ElastiCache instances?
        self.elasticache_enabled = False

        # Return all EC2 instances?
        self.all_instances = False

        # Instance states to be gathered in inventory. Default is 'running'.
        # Setting 'all_instances' to 'yes' overrides this option.
        ec2_valid_instance_states = [
            'pending',
            'running',
            'shutting-down',
            'terminated',
            'stopping',
            'stopped'
        ]
        self.ec2_instance_states = ['running']

        # Return all RDS instances? (if RDS is enabled)
        self.all_rds_instances = False

        # Return all ElastiCache replication groups? (if ElastiCache is enabled)
        self.all_elasticache_replication_groups = False

        # Return all ElastiCache clusters? (if ElastiCache is enabled)
        self.all_elasticache_clusters = False

        # Return all ElastiCache nodes? (if ElastiCache is enabled)
        self.all_elasticache_nodes = False

        # boto configuration profile (prefer CLI argument)
        self.boto_profile = self.args.boto_profile

        # Cache related
        cache_dir = os.path.expanduser(os.environ.get('EC2_INI_CACHE_DIR',
                                                      '/tmp/.ansible'))
        if not os.path.exists(cache_dir):
            os.makedirs(cache_dir)

        cache_name = 'ansible-ec2'
        aws_profile = lambda: (self.boto_profile or
                               os.environ.get('AWS_PROFILE') or
                               os.environ.get('AWS_ACCESS_KEY_ID') or
                               self.credentials.get('aws_access_key_id', None))
        if aws_profile():
            cache_name = '%s-%s' % (cache_name, aws_profile())
        self.cache_path_cache = cache_dir + "/%s.cache" % cache_name
        self.cache_path_index = cache_dir + "/%s.index" % cache_name
        self.cache_max_age = 300

        self.expand_csv_tags = False

        # Configure nested groups instead of flat namespace.
        self.nested_groups = False

        # Replace dash or not in group names
        self.replace_dash_in_groups = True

        # Configure which groups should be created.
        group_by_options = [
            'group_by_instance_id',
            'group_by_region',
            'group_by_availability_zone',
            'group_by_ami_id',
            'group_by_instance_type',
            'group_by_key_pair',
            'group_by_vpc_id',
            'group_by_security_group',
            'group_by_tag_keys',
            'group_by_tag_none',
            'group_by_route53_names',
            'group_by_rds_engine',
            'group_by_rds_parameter_group',
            'group_by_elasticache_engine',
            'group_by_elasticache_cluster',
            'group_by_elasticache_parameter_group',
            'group_by_elasticache_replication_group',
        ]
        for option in group_by_options:
            setattr(self, option, True)

        # Do we need to just include hosts that match a pattern?
        self.pattern_include = None

        # Do we need to exclude hosts that match a pattern?
        self.pattern_exclude = None

        # Instance filters (see boto and EC2 API docs). Ignore invalid filters.
        self.ec2_instance_filters = defaultdict(list)
